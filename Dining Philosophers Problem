#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5   // Number of philosophers

sem_t chopstick[N];   // Semaphores for chopsticks

void *philosopher(void *num) {
    int id = *(int *)num;

    while(1) {
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        // Pick up chopsticks
        sem_wait(&chopstick[id]);
        sem_wait(&chopstick[(id+1)%N]);

        printf("Philosopher %d is eating...\n", id);
        sleep(2);

        // Put down chopsticks
        sem_post(&chopstick[id]);
        sem_post(&chopstick[(id+1)%N]);

        printf("Philosopher %d finished eating and starts thinking again...\n", id);
    }
}

int main() {
    pthread_t philo[N];
    int i, ids[N];

    // Initialize semaphores
    for(i=0;i<N;i++) sem_init(&chopstick[i], 0, 1);

    // Create philosopher threads
    for(i=0;i<N;i++){
        ids[i] = i;
        pthread_create(&philo[i], NULL, philosopher, &ids[i]);
    }

    // Join threads (never ending loop)
    for(i=0;i<N;i++) pthread_join(philo[i], NULL);

    return 0;
}


OUTPUT
Philosopher 0 is thinking...
Philosopher 1 is thinking...
Philosopher 2 is thinking...
Philosopher 3 is thinking...
Philosopher 4 is thinking...
Philosopher 2 is eating...
Philosopher 0 is eating...
Philosopher 2 finished eating and starts thinking again...
Philosopher 4 is eating...
Philosopher 0 finished eating and starts thinking again...
Philosopher 1 is eating...
...
